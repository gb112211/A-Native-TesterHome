package com.testerhome.nativeandroid.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.testerhome.nativeandroid.dao.UserPraiseHistory;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_PRAISE_HISTORY".
*/
public class UserPraiseHistoryDao extends AbstractDao<UserPraiseHistory, String> {

    public static final String TABLENAME = "USER_PRAISE_HISTORY";

    /**
     * Properties of entity UserPraiseHistory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property TopicId = new Property(0, String.class, "topicId", true, "TOPIC_ID");
        public final static Property UserId = new Property(1, Integer.class, "userId", false, "USER_ID");
    };


    public UserPraiseHistoryDao(DaoConfig config) {
        super(config);
    }
    
    public UserPraiseHistoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_PRAISE_HISTORY\" (" + //
                "\"TOPIC_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: topicId
                "\"USER_ID\" INTEGER);"); // 1: userId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_PRAISE_HISTORY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserPraiseHistory entity) {
        stmt.clearBindings();
 
        String topicId = entity.getTopicId();
        if (topicId != null) {
            stmt.bindString(1, topicId);
        }
 
        Integer userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UserPraiseHistory readEntity(Cursor cursor, int offset) {
        UserPraiseHistory entity = new UserPraiseHistory( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // topicId
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1) // userId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserPraiseHistory entity, int offset) {
        entity.setTopicId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(UserPraiseHistory entity, long rowId) {
        return entity.getTopicId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(UserPraiseHistory entity) {
        if(entity != null) {
            return entity.getTopicId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
